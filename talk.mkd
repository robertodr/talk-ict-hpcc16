name: inverse
layout: true
class: center, middle, inverse
---
## PCMSolver: An Application Programming Interface for the Polarizable Continuum Model

.subtitle[The PCM Goes Viral!]

.author[Roberto Di Remigio, ] .coauthor[Luca Frediani]

.institution[UiT -- The Arctic University of Norway]

.date[16 October 2016, Chongqing]

.footnote[[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/) licensed.
Browse slides at [http://tinyurl.com/rdr-ict-hpcc16](http://tinyurl.com/rdr-ict-hpcc16)]

???

This talk is an introduction to continuum solvation models and in particular to
the polarizable continuum model (PCM)
I will introduce the basic features of the model and talk about our
implementation as an independent library

---
layout: false

.left-column[
  ## Outline
]
.right-column[

- The problem of solvation

- Polarizable continuum model

- Modular code development

- PCMSolver

]

???

---
layout: false
class: split-50
## The Problem of Solvation

.column[
<font color="red">
Solvent effects
</font>
<p style="clear: both;">
- Direct
- Indirect
- Local field
- Dynamic
- Specific

**Balanced description** needed to reproduce/predict experiments!
]
.column[
<p style="text-align:center;"><img src="images/pyridine+water_12AA_QM.png" style="width: 40%"></p>
<p style="clear: both;">
]
<p style="clear: both;">

<font color="red">
Problems
</font>
<p style="clear: both;">

- Size \\(\Leftrightarrow\\) accurate _ab initio_ not possible
- Conformations \\(\Leftrightarrow\\) statistical sampling

???

- Chemistry is a wet science: experiments mostly happen in solution.
- We can classify solvent effects as:
  * Direct: these effects stem straightforwardly from the modification
    underwent by the solute electronic density when interacting with the
    environment.
  * Indirect: it is common for solutes to exhibit different minimum-energy
    conformations in different environments. These effects are commonly
    labelled as indirect.
  * Local field: light-matter interactions are also affected by the
    environment. Local modifications of externally applied fields subtly
    influence molecular responses.
  * Dynamic: the presence of the environment radically influences excited
    states, since relaxation processes in the medium become important.
  * Specific:  This catch-all category includes all effects stemming from the
    peculiar solute-solvent pair interactions that cannot be fully described
    under any of the previous labels. In general, modelling such effects
    demands an atomistic level of detail.
- Size is a huge problem. It is simply not possible to model large systems very
  accurately.
- Moreover, the conformational space is very large and needs to be sampled
  extensively to have meaningful results.
- Energy decomposition.

<font color="red">
<center>Once again, approximations needed!!!</center>
</font>
<p style="clear: both;">

---
layout: false
class: split-50
## Multiscale models.red[<sup>1</sup>]

- Use **quantum** and **classical** physics together:
  * quantum for chemically relevant subsystem
  * classical for the environment

.column[
<p style="text-align:center;"><img src="images/gfp_barrel.png" style="width: 100%"></p>
<p style="clear: both;">
]
.column[
<p style="text-align:center;"><img src="images/pyridine+water_12AA_QMMM.png" style="width: 50%"></p>
<p style="clear: both;">
]

.footnote[.red[<sup>1</sup>] H. M. Senn, W. Thiel, _Angew. Chem. Int. Ed. Engl._, __48__, 1198, (2009)]

???

- The idea of multiscale models is to _focus_ on the chemically relevant part
  of the system and treat the environment approximately.

---
layout: false
class: split-60

## QM/Continuum.red[<sup>2</sup>]

- Use **quantum** and **classical** physics together:
  * quantum for chemically relevant subsystem
  * _continuum dielectric_ for the environment

.column[
- **Exact** electrostatics
- Self-consistent polarization
- **No** chemical detail
- Dispersion and repulsion approximate
- Statistically averaged _by construction_
]
.column[
<p style="text-align:right;"><img src="images/pyridine_Continuum.png" style="width: 40%"></p>
<p style="clear: both;">
]

.footnote[.red[<sup>2</sup>] J. Tomasi, B. Mennucci, R. Cammi, _Chem. Rev._, __105__, 2999, (2005)]

???

---
layout: false
class: split-60

## QM/Continuum: the polarizable continuum model.red[<sup>2</sup>]

.column[
- Replace environment with continuum \\(\varepsilon\\)
- Create cavity in continuum \\(\Omega_i\\)
- Vacuum inside cavity \\(\varepsilon=1\\)
- Solute charge density _entirely_ in \\(\Omega_i\\)

A problem in classical electrostatics:
`$$
  \begin{align}
  L_\mathrm{i} u &= \nabla^2 u = -4\pi\rho \,\, \text{in}\,\, \Omega_\mathrm{i} \label{eq:internal} \\
  L_\mathrm{e} u &= 0 \,\, \text{in}\,\, \Omega_\mathrm{e} \label{eq:external} \\
  [u](\mathbf{s}) &= u_\mathrm{e} - u_\mathrm{i} = 0 \,\, \text{on}\,\, \Gamma
  \label{eq:trace-jump} \\
[\partial_L u](\mathbf{s}) &= \partial_{L_\mathrm{e}} u - \partial_{L_\mathrm{i}} u = 0 \,\, \text{on}\,\, \Gamma \label{eq:conormal-jump} \\
|u(\mathbf{r})| &\leq C \|\mathbf{r} \|^{-1} \,\,\text{for}\,\,\| \mathbf{r} \|\rightarrow\infty
\label{eq:radiation}
\end{align}
$$`
]
.column[
<p style="text-align:right;"><img src="images/alanine.svg" style="width: 40%"></p>
<p style="clear: both;">
]

.footnote[.red[<sup>2</sup>] J. Tomasi, B. Mennucci, R. Cammi, _Chem. Rev._, __105__, 2999, (2005)]

???

- Model the solvent as a polarizable dielectric continuum
- Parameters for the definition of the boundary, i.e. the cavity
- Parameters describing the solvent: permittivity (static and optical)
- Notice that the solvent parameters are, _by definition_, averaged!

---
## Mathematics of PCM.red[<sup>3</sup>]

- Transmission problem, find \\(u\\) such that:
`$$
 \begin{align}
  L_\mathrm{i} u &= \nabla^2 u = -4\pi\rho \,\, \text{in}\,\, \Omega_\mathrm{i}\\
  L_\mathrm{e} u &= 0 \,\, \text{in}\,\, \Omega_\mathrm{e} \\
  [u](\mathbf{s}) &= u_\mathrm{e} - u_\mathrm{i} = 0 \,\, \text{on}\,\, \Gamma \\
[\partial_L u](\mathbf{s}) &= \partial_{L_\mathrm{e}} u - \partial_{L_\mathrm{i}} u = 0 \,\, \text{on}\,\, \Gamma \\
|u(\mathbf{r})| &\leq C \|\mathbf{r} \|^{-1} \,\,\text{for}\,\,\| \mathbf{r} \|\rightarrow\infty
 \end{align}
$$`

    * \\(L_\star\\) are elliptic differential operators
    * Dirichelt condition: \\([u] (\mathbf{s})\\)
    * Neumann condition: \\([\partial_L u] (\mathbf{s})\\)

- Define the _reaction potential_:
`$$
 u(\mathbf{r}) = \varphi(\mathbf{r}) + \xi(\mathbf{r})
 = \int_C \mathop{}\!\mathrm{d}\mathbf{r}^\prime \frac{\rho(\mathbf{r}^\prime)}{|\mathbf{r} - \mathbf{r}^\prime|} +
  \int_{\partial C} \mathop{}\!\mathrm{d}\mathbf{s} \frac{\color{red}{\sigma(\mathbf{s})}}{|\mathbf{r} - \mathbf{s}|}
$$`

.footnote[.red[<sup>3</sup>] E. Cancès, B. Mennucci, _J. Math. Chem._, __23__, 309, (1998)]

???

- \\(L_\star\\) are elliptic differential operators
- Trace operators are the extension of the concept of restriction of a function
  over a boundary to generalized functions in Sobolev space
- Conormal derivative extends the notion of a normal derivative to functions in
  Sobolev spaces
- \\(\sigma(\mathbf{s})\\) is called the apparent surface charge (ASC)

---

## Mathematics of PCM, contd..red[<sup>4</sup>]

_Apparent surface charge_ (ASC):
- _Unique solution_ to the IEF-PCM equation:
`$$
\left[\left(2\pi\mathcal{I} - \mathcal{D}_\mathrm{e}\right)\mathcal{S}_\mathrm{i} +
      \mathcal{S}_\mathrm{e}\left(2\pi\mathcal{I} + \mathcal{D}^\dagger_\mathrm{i}\right) \right]\color{red}{\sigma} =
-\left[\left(2\pi\mathcal{I} - \mathcal{D}_\mathrm{e}\right) -
\mathcal{S}_\mathrm{e}\mathcal{S}_\mathcal{i}^{-1}\left(2\pi\mathcal{I} - \mathcal{D}_\mathrm{i}\right)\right]\color{blue}{\varphi}
$$`
- Integral operators are Calderón projector components:
`$$
 \begin{align}
  (\mathcal{S}_\star f)(\mathbf{s}) &= \int_{\partial C} \mathop{}\!\mathrm{d}\mathbf{s}^\prime \color{red}{G_\star(\mathbf{s}, \mathbf{s}^\prime)}f(\mathbf{s}^\prime) \\
  (\mathcal{D}_\star f)(\mathbf{s}) &= \int_{\partial C} \mathop{}\!\mathrm{d}\mathbf{s}^\prime [\partial_{L_\star}^\prime\color{red}{G_\star(\mathbf{s}, \mathbf{s}^\prime)}]f(\mathbf{s}^\prime) \\
  (\mathcal{D}^\dagger_\star f)(\mathbf{s}) &= \int_{
  \partial C} \mathop{}\!\mathrm{
  d}\mathbf{s}^\prime [\partial_{
  L_\star}\color{red}{G_\star(\mathbf{s}, \mathbf{s}^\prime)}]f(\mathbf{s}^\prime)
 \end{align}
$$`

<font color="red">
<center>How to solve this? <img src="images/fearful.svg" style="width: 5%"></center>
</font>
<p style="clear: both;">

.footnote[.red[<sup>4</sup>] S. A. Sauter and C. Schwab, _Boundary Element Methods_, Springer, 2011]

???

- We've transformed a boundary value problem (BVP) into a boundary integral equation (BIE)
- Integral operators are defined in terms of traces and conormal derivatives
- The integral operators have well-defined mapping properties between Sobolev
  spaces of fractional order
- Knowledge of the Green's functions inside and outside the cavity is key to
  the method

---

## Isotropic PCM and COSMO.red[<sup>2</sup>]

* _homogeneous_ and _isotropic_ dielectric, \\(\varepsilon\\)
`$$
 \begin{alignat}{2}
 G_\mathrm{e}(\mathbf{r}, \mathbf{r}^\prime)
 = \frac{1}{\varepsilon |\mathbf{r} - \mathbf{r}^\prime| }
 = \frac{1}{
\varepsilon}G_\mathrm{i}(\mathbf{r}, \mathbf{r}^\prime),
 \quad&
 G_\mathrm{i}(\mathbf{r}, \mathbf{r}^\prime)
 = \frac{1}{|\mathbf{r} - \mathbf{r} ^\prime | }
 \end{alignat}
$$`
Then one has:
`$$
\left[ 2\pi \left(\frac{\varepsilon+1}{\varepsilon-1}\right) - \mathcal{D}\right]
\mathcal{S}\color{red}{\sigma} = -\left( 2\pi - \mathcal{D} \right)
\color{blue}{\varphi}
$$`

* Let \\(\varepsilon\rightarrow\infty\\), then:
`$$
\mathcal{S}\color{red}{\sigma} = -f(\varepsilon)\color{blue}{\varphi},
\quad
f(\varepsilon) = \frac{\varepsilon -  1}{\varepsilon + x},\quad 0 \leq x \leq 1
$$`

<font color="red">
<center>How to solve these? <img src="images/fearful.svg" style="width: 5%"></center>
</font>
<p style="clear: both;">

.footnote[.red[<sup>2</sup>] J. Tomasi, B. Mennucci, R. Cammi, _Chem. Rev._, __105__, 2999, (2005)]

???

---
layout: false
class: split-70

## Boundary element method and PCM.red[<sup>5</sup>]

.column[
Solution by a boundary element method (BEM)

* \\(N_\mathrm{ts}\\) finite elements on the cavity boundary
* Form boundary integral operators: _Galerkin_ or _collocation_ method
`$$
 \mathbf{T}(\varepsilon)\color{red}{\mathbf{q}} = - \mathbf{R}\color{blue}{\mathbf{v}}
$$`
* Solve linear system: direct inversion or iterative solver
]
.column[
<p style="text-align:right;"><img src="images/benzene_GePol.png" style="width: 30%"></p>
<p style="clear: both;">
]

- Similar equation for IEF-PCM, isotropic PCM and COSMO
- _Independent_ of QM method!

.footnote[.red[<sup>5</sup>] A. Ern and J. L. Guermond, _Theory and Practice of Finite Elements_, Springer, 2004]

???

---
layout: false

## Self-Consistent Field with PCM

<p style="text-align:center;"><img src="images/algorithm.png" style="width: 45%"></p>
<p style="clear: both;">

???

---

layout: false

## Modular code development.red[<sup>6</sup>]

### Examples

- Lego
- Car manufacturing
- Modular composition when you order a laptop

### Advantages

- Separation of concerns
- Composability
- Leveraging functionality

.footnote[.red[<sup>6</sup>] Reproduced, with modifications, from [Library design the hard way](http://cicero.xyz/v2/remark/github/bast/talk-library-design/master/talk.mkd/#1)]

---

layout: false
class: split-50

## Do one thing, do it well.red[<sup>6</sup>]

.column[
### Coupling
- Strong
<p style="text-align:center;"><img src="images/strong-coupling.svg" style="width: 45%"></p>
- Loose
<p style="text-align:center;"><img src="images/loose-coupling.svg" style="width: 45%"></p>
]
.column[
### Cohesion
- Low
<p style="text-align:center;"><img src="images/low-cohesion.svg" style="width: 15%"></p>
- High
<p style="text-align:center;"><img src="images/high-cohesion.svg" style="width: 10%"></p>
]
<p style="clear: both;">

.footnote[.red[<sup>6</sup>] Reproduced from [Library design the hard way](http://cicero.xyz/v2/remark/github/bast/talk-library-design/master/talk.mkd/#1)]

???

- Coupling
    - Assemble/deassemble/reassemble
    - Reason about/understand the code

- Low cohesion: difficult to maintain, test, reuse, or even understand
    - Non-cohesive code has unnecessary dependencies
    - Swiss army knife modules

- High cohesion: associated with robustness, reliability, reusability, and understandability
    - Do one thing only and do it well
    - API of cohesive code changes less over time
    - Power of the Unix command line is a set of highly cohesive tools
    - Microservices

---

## Library design in a modular world

<p style="text-align:center;"><img src="images/joe-paradiso-modular-synth-front.png" style="width: 500px;"/></p>
<p style="clear: both;">

- Copyright Joe Paradiso (MIT)

---

## Must haves 1/2.red[<sup>6</sup>]

### Encapsulation

- Hide internals by language or by convention
- Interface exposed in a separate file
- Expose the **what**, hide the **how**

### Development history

- Decouple the development history
- Each unit should have its own Git history/repository

### Documentation

- Separate the **what it can do** from **how is it implemented**
- Documented **application programming interface** (API)
- Versioned API ([semantic](http://semver.org) or [sentimental](http://sentimentalversioning.org)
  or [romantic](https://github.com/jashkenas/backbone/issues/2888#issuecomment-29076249) versioning)

.footnote[.red[<sup>6</sup>] Reproduced from [Library design the hard way](http://cicero.xyz/v2/remark/github/bast/talk-library-design/master/talk.mkd/#1)]

---
layout: false
class: split-50

## Must haves 2/2.red[<sup>6</sup>]

.column[
### Testing

- Sharpens interfaces
- Exposes coupling and cohesion
]
.column[
<p style="text-align:center;"><img src="images/why_you_need_testing.jpg" style="width: 45%;"/></p>
]
<p style="clear: both;">

### Building and deploying

- Prerequisite for testable on its own
-

.footnote[.red[<sup>6</sup>] Reproduced from [Library design the hard way](http://cicero.xyz/v2/remark/github/bast/talk-library-design/master/talk.mkd/#1)]

---

## PCMSolver: an API for the PCM.red[<sup>7</sup>]

- Open-source licensed (LGPLv3)
- Developed on [GitHub](https://github.com/PCMSolver/pcmsolver)
- C++ (~5000 LOC) and Fortran (~3000 LOC)
<p style="text-align:center;"><img src="images/pcmsolver-scheme.png" style="width: 60%"></p>
<p style="clear: both;">

.footnote[.red[<sup>7</sup>] Find it at [pcmsolver.readthedocs.io](http://pcmsolver.readthedocs.io/en/latest/) and [github.com/PCMSolver/pcmsolver](https://github.com/PCMSolver/pcmsolver)]

---

## PCMSolver: an API for the PCM.red[<sup>7</sup>]

- Capabilities
  * Traditional collocation solvers
  * Isotropic and anisotropic Green's functions
  * Wavelet solvers _in progress_
  * Real-time solvers _in progress_

- Build system
  * [CMake](https://cmake.org/) _via_ [Autocmake](http://autocmake.readthedocs.io/en/latest/)
  * Static and shared libraries available

- API
  * Pure C for interoperability
  * Fortran bindings built on-demand

.footnote[.red[<sup>7</sup>] Find it at [pcmsolver.readthedocs.io](http://pcmsolver.readthedocs.io/en/latest/) and [github.com/PCMSolver/pcmsolver](https://github.com/PCMSolver/pcmsolver)]

---

## PCMSolver: an API for the PCM.red[<sup>7</sup>]

- Testing
  * Use [Catch](https://github.com/philsquared/Catch) C++ framework
  * The `master` branch has 51 tests
  * _Continuous integration_ (CI) on [Travis](https://travis-ci.org/) and [Magnum](https://magnum-ci.com/)

- Release process
  * Public repo on GitHub
  * Private repo on GitLab
  * Precompiled library served on [Anaconda cloud](https://anaconda.org/psi4/pcmsolver)

- Documented:
  * Doxygen for _in-code_ documentation
  * Sphinx for users and programmers documentation
  * Served on [ReadTheDocs](https://readthedocs.org/)

.footnote[.red[<sup>7</sup>] Find it at [pcmsolver.readthedocs.io](http://pcmsolver.readthedocs.io/en/latest/) and [github.com/PCMSolver/pcmsolver](https://github.com/PCMSolver/pcmsolver)]

---

## Interfaces to QM programs

- DALTON (w/ A. H. Steindal, K. Ruud, M. Ringholm _et al._)
  * HF and DFT up to linear electric response properties
  * Interfaced also to open-ended response code (only electric)
  * Status: **unreleased**

- LSDALTON (w/ S. S. Reine)
  * HF and DFT up to linear electric response properties
  * Status: **released**

- Psi4 (w/ T. Daniel Crawford, A. Simmonett, L. A. Burns)
  * HF and DFT
  * Status: **released**

---

## Interfaces to QM programs, contd.

- DIRAC (w/ T. Saue)
  * 4-component, Kramers restricted, HF and DFT up to linear static electric response properties
  * Status: **released**

- ReSpect (w/ M. Repisky, S. Komorowsky, K. Ruud, S. Pipolo)
  * 4-component, Kramers restricted and unrestricted HF and DFT
  * Real-time propagation _in progress_
  * Status: **unreleased**

- KOALA (w/ S. Höfener)
  * Subsystem DFT up to linear electric response properties
  * Status: **unreleased**

---

## Using PCMSolver

[Context-aware](https://github.com/bast/context-api-example) API
  * _Opaque_ handle to complex initialization operations
  * Confine state to module
  * Multiple contexts possible

```C
/*! Forward-declare opaque handle to a PCM context */
typedef struct pcmsolver_context_t pcmsolver_context_t;
```

---

## Using PCMSolver, contd.

[Context-aware](https://github.com/bast/context-api-example) API
 * Initialization

```C++
#ifndef AS_TYPE
#define AS_TYPE(Type, Obj) reinterpret_cast<Type *>(Obj)
#endif

pcmsolver_context_t * pcmsolver_new(pcmsolver_reader_t input_reading, int
    nr_nuclei, double charges[], double coordinates[], int symmetry_info[],
    PCMInput * host_input)
{
  return AS_TYPE(pcmsolver_context_t, new pcm::Meddle(input_reading,
        nr_nuclei, charges, coordinates, symmetry_info, *host_input));
}
```
 * Finalization

```C++
void pcmsolver_delete(pcmsolver_context_t * context)
{
  if (!context) return;
  delete AS_TYPE(pcm::Meddle, context);
}
```

---

## Using PCMSolver, contd.

[Context-aware](https://github.com/bast/context-api-example) API
  * Operations require context
  * Enforce namespacing by convention
  * `get` and `set` functions

```C
pcmsolver_context_t * pcm_context = pcmsolver_new(PCMSOLVER_READER_OWN,
    NR_NUCLEI, charges, coordinates, symmetry_info, &host_input);

pcmsolver_print(pcm_context);

int grid_size = pcmsolver_get_cavity_size(pcm_context);
int irr_grid_size = pcmsolver_get_irreducible_cavity_size(pcm_context);
double * grid = (double *) calloc(3*grid_size, sizeof(double));
pcmsolver_get_centers(pcm_context, grid);
```

---

## Using PCMSolver, contd.

[Surface functions](http://pcmsolver.readthedocs.io/en/latest/users/interfacing.html#how-pcmsolver-handles-potentials-and-charges-surface-functions)
  * PCM \\(\Leftrightarrow\\) functions defined on cavity surface
  * Function label + function data = surface function
  * Map of labels and data

```C
double * mep = nuclear_mep(NR_NUCLEI, charges, coordinates, grid_size, grid);
const char * mep_label = {"NucMEP"};
pcmsolver_set_surface_function(pcm_context, grid_size, mep, mep_label);

const char * asc_label = {"NucASC"};
int irrep = 0;
pcmsolver_compute_asc(pcm_context, mep_label, asc_label, irrep);
double * asc = (double *) calloc(grid_size, sizeof(double));
pcmsolver_get_surface_function(pcm_context, grid_size, asc, asc_label);

double energy =
       pcmsolver_compute_polarization_energy(pcm_context, mep_label, asc_label);
```

---
layout: false
class: split-50

## Solvation in the Relativistic Regime.red[<sup>*</sup>]

`$$
\mathbf{F} = \begin{pmatrix}
\mathbf{F}^{LL, \mathrm{vac}} + \mathbf{q}\cdot\mathbf{v}^{LL} & \mathbf{F}^{LS, \mathrm{vac}} \\
\mathbf{F}^{SL, \mathrm{vac}} & \mathbf{F}^{SS, \mathrm{vac}} + \mathbf{q}\cdot\mathbf{v}^{SS}
\end{pmatrix}
$$`
- Extended to EPR and pNMR parameters (ReSpect)

<p style="clear: both;">

.column[
`$$
\mathrm{H}_2\mathrm{O}
$$`
<p style="text-align:center;"><img src="images/H2O_MEP-diff-pcmdc-dc.png" style="width: 75%"></p>
<p style="clear: both;">
]
.column[
`$$
\mathrm{H}_2\mathrm{Po}
$$`
<p style="text-align:center;"><img src="images/H2Po_MEP-diff-pcmdc-dc.png" style="width: 38%"></p>
<p style="clear: both;">
]

.footnote[.red[<sup>*</sup>] R. Di Remigio, R. Bast, L. Frediani, T. Saue, _J. Phys. Chem. A_, __119__, 5061, (2015)]

---

## Using Wavelets for the PCM.red[<sup>*</sup>]

.footnote[.red[<sup>*</sup>] M. Bugeanu, R. Di Remigio, K. Mozgawa, S. S. Reine, H. Harbrecht, L. Frediani, _PCCP_, __17__, 31566, (2015)]

- Sparse representation <img src="images/smiley.svg" style="width: 4%">
- Linear memory and time cost <img src="images/smiley.svg" style="width: 4%">
- Huge number of surface points <img src="images/scream.svg" style="width: 4%">

--

<div class="imageWrapper">
  <img class="overlayImage" src="images/a_2_l_0_5_fs.png" style="width: 90%" align="middle">
--
  <img class="overlayImage" src="images/alpha_convergence.png" style="width: 75%" align="middle">
</div>
<p style="clear: both;">

???

- Use wavelet Galerkin BEM for PCM

---
layout: false
class: split-50

## Spherical Diffuse Interfaces.red[<sup>*</sup>]

.footnote[.red[<sup>*</sup>] R. Di Remigio, K. Mozgawa, H. Cao, V. Weijo, L. Frediani, _J. Chem. Phys._, __144__, 124103, (2016)]

- Modelling of nonhomogeneous environments
- Numerical Green's function

.column[
<p style="text-align:center;"><img src="images/acetone_normal.jpg" style="width: 100%"></p>
<p style="clear: both;">
]
.column[
<p style="text-align:center;"><img src="images/permittivity_profiles.jpg" style="width: 50%"></p>
<p style="clear: both;">
]

---
layout: false
class: split-50

## Spherical Diffuse Interfaces.red[<sup>*</sup>]

.footnote[.red[<sup>*</sup>] R. Di Remigio, K. Mozgawa, H. Cao, V. Weijo, L. Frediani, _J. Chem. Phys._, __144__, 124103, (2016)]

- Modelling of nonhomogeneous environments
- Numerical Green's function

.column[
<p style="text-align:center;"><img src="images/dipole-acetone-perp-water_vapor-width.jpg" style="width: 85%"></p>
<p style="clear: both;">
]
.column[
<p style="text-align:center;"><img src="images/dipole-acetone-perp-water_vapor-curvature.jpg" style="width: 45%"></p>
<p style="clear: both;">
]

---

layout: false

## Acknowldegements

- Prof. Luca Frediani
- Dr. Radovan Bast

---
name: last-page
template: inverse

# Thanks for your attention!

Slideshow created using [remark] and served using [cicero]

Slides available on [GitHub](https://github.com/robertodr/talk-hzau)

Browse slides at [http://tinyurl.com/rdr-ict-hpcc16](http://tinyurl.com/rdr-ict-hpcc16)

[remark]: https://github.com/gnab/remark
[cicero]: https://github.com/bast/cicero
